// This is your Prisma schema file,// learn more about it in the docs: https://pris.ly/d/prisma-schema// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?// Try Prisma Accelerate: https://pris.ly/cli/accelerate-initgenerator client {  provider = "prisma-client-js"  output   = "../src/generated/prisma"}datasource db {  provider = "postgresql"  url      = env("DATABASE_URL")}enum Gender {  male  female}enum VerificationStatus {  rejected  pending  accepted}enum HistoryStatus {  deleted  expired}enum CardStatus {  submitted  pending  expired}enum RideStatus {  waiting  started  finished  canceled}enum TripStatus {  waiting  started  finished}enum TransactionType {  service  payment  withdraw}enum TransactionStatus {  pending  success  canceled}enum OtpStatus {  waiting  submitted  canceled}enum Language {  ru  uz  en}enum UserStatus {  available  blocked}enum PaymentMethod {  card  cash}model Users {  id BigInt @id @unique @default(autoincrement())  first_name String?  last_name String?  gender Gender?  pinfl String? @db.Text  birth BigInt?  nationality String?  passport_series String?  passport_number Int?  passport_exp BigInt?  photo String? @db.Text  my_id_photo String? @db.Text  phone_number String @db.VarChar(20)  rating Float @default(5.0)  user_verification Boolean @default(false)  driver_verification Boolean @default(false)  verifiedAt DateTime?  status UserStatus @default(available)  createdAt DateTime @default(now())  updatedAt DateTime @updatedAt  devices Devices[]  driver_license DriverLicense?  driver_license_history DriverLicenseHistory[]  cards Cards[]  cars Cars[]  wallet Wallet?  rides Ride[]  reviews_given Reviews[] @relation("ReviewGiven")  reviews_received Reviews[] @relation("ReviewReceived")  chats_driver Chats[] @relation("ChatsAsDriver")  chats_passenger Chats[] @relation("ChatsAsPassenger")  messages ChatMessages[]  user_bookings Bookings[]  books BookingUsers[]  transactions Transactions[]}model Devices {  id String @id @unique @db.Uuid @default(uuid(4))  brand String @db.Text  model String @db.Text  OS String @db.Text  version String @db.Text  user_id BigInt?  user Users? @relation(fields: [user_id], references: [id])  app_version String @db.Text  fcm_token String? @db.Text  language Language @default(uz)  access_token String? @db.Text  createdAt DateTime @default(now())  updatedAt DateTime @updatedAt}model Staff {  id String @id @unique @db.Uuid @default(uuid(4))  full_name String  phone_number String  password String @db.Text  createdAt DateTime @default(now())  updatedAt DateTime @updatedAt  driver_license_verifications DriverLicenseVerification[]  driver_license_history DriverLicenseHistory[]  vehicle_verifications VehicleVerification[]  vehicle_license_verifications VehicleLicenseVerification[]}model DriverLicense {  id String @id @unique @db.Uuid @default(uuid(4))  exp String  series String @db.VarChar(5)  number Int  photo_front String? @db.Text  photo_back String? @db.Text  status VerificationStatus @default(pending)  createdAt DateTime @default(now())  updatedAt DateTime @updatedAt  user_id BigInt @unique  user Users @relation(fields: [user_id], references: [id])  verifications DriverLicenseVerification[]}model DriverLicenseVerification {  id String @id @unique @db.Uuid @default(uuid(4))  photo_front String @db.Text  photo_back String @db.Text  status VerificationStatus @default(pending)  status_datetime DateTime?  reject_comment Json?  createdAt DateTime @default(now())  updatedAt DateTime @updatedAt  license_id String @db.Uuid  license DriverLicense @relation(fields: [license_id], references: [id])  staff_id String? @db.Uuid  staff Staff? @relation(fields: [staff_id], references: [id])}model DriverLicenseHistory {  id String @id @unique @db.Uuid @default(uuid(4))  exp String  series String @db.VarChar(5)  number Int  photo_front String? @db.Text  photo_back String? @db.Text  accepted_date DateTime  status HistoryStatus @default(expired)  createdAt DateTime @default(now())  updatedAt DateTime @updatedAt  user_id BigInt @unique  user Users @relation(fields: [user_id], references: [id])  staff_id String? @db.Uuid  staff Staff? @relation(fields: [staff_id], references: [id])}model Cars {  id String @id @unique @db.Uuid @default(uuid(4))  brand String  model String  plate String  color String  year Int  vin String @db.Text  status VerificationStatus @default(pending)  createdAt DateTime @default(now())  updatedAt DateTime @updatedAt  user_id BigInt  user Users @relation(fields: [user_id], references: [id])  vehicle_license VehicleLicense?  vehicle_verifications VehicleVerification[]  rides Ride[]}model VehicleVerification {  id String @id @unique @db.Uuid @default(uuid(4))  photo_front String @db.Text  photo_left String @db.Text  photo_back String @db.Text  photo_right String @db.Text  status VerificationStatus @default(pending)  status_datetime DateTime?  reject_comment Json?  createdAt DateTime @default(now())  updatedAt DateTime @updatedAt  car_id String @db.Uuid  car Cars @relation(fields: [car_id], references: [id])  staff_id String? @db.Uuid  staff Staff? @relation(fields: [staff_id], references: [id])}model VehicleLicense {  id String @id @unique @db.Uuid @default(uuid(4))  series String @db.VarChar(5)  number Int  exp DateTime  photo_front String @db.Text  photo_back String @db.Text  status VerificationStatus @default(pending)  createdAt DateTime @default(now())  updatedAt DateTime @updatedAt  car_id String @unique @db.Uuid  car Cars? @relation(fields: [car_id], references: [id])  vehicle_license_verifications VehicleLicenseVerification[]}model VehicleLicenseVerification {  id String @id @unique @db.Uuid @default(uuid(4))  photo_front String @db.Text  photo_back String @db.Text  status VerificationStatus @default(pending)  status_datetime DateTime  reject_comment Json?  createdAt DateTime @default(now())  updatedAt DateTime @updatedAt  vehicle_license_id String @db.Uuid  vehicle_license VehicleLicense @relation(fields: [vehicle_license_id], references: [id])  staff_id String? @db.Uuid  staff Staff? @relation(fields: [staff_id], references: [id])}model Cards {  id String @id @unique @db.Uuid @default(uuid(4))  number String @db.Text  exp String  placeholder String?  card_type String  status CardStatus @default(pending)  createdAt DateTime @default(now())  updatedAt DateTime @updatedAt  user_id BigInt  user Users @relation(fields: [user_id], references: [id])  transactions Transactions[]  bookings Bookings[]}model Wallet {  id String @id @unique @db.Uuid @default(uuid(4))  balance BigInt @default(0)  createdAt DateTime @default(now())  updatedAt DateTime @updatedAt  user_id BigInt @unique  user Users? @relation(fields: [user_id], references: [id])  transactions Transactions[]}model Ride {  id String @id @unique @db.Uuid @default(uuid(4))  seats Int  start_datetime DateTime  status RideStatus @default(waiting)  createdAt DateTime @default(now())  updatedAt DateTime @updatedAt  driver_id BigInt  driver Users @relation(fields: [driver_id], references: [id])  car_id String @db.Uuid  car Cars @relation(fields: [car_id], references: [id])  reviews Reviews[]  points Points[]  indexes RideIndexes[]  trips Trips[]  transactions Transactions[]  chats Chats[]}model Reviews {  id String @id @unique @db.Uuid @default(uuid(4))  rate Float  comment String @db.VarChar(200)  createdAt DateTime @default(now())  updatedAt DateTime @updatedAt  from_user_id BigInt  review_owner Users @relation(name: "ReviewGive n", fields: [from_user_id], references: [id])  to_user_id BigInt  review_to Users @relation(name: "ReviewReceived", fields: [to_user_id], references: [id])  ride_id String @db.Uuid  ride Ride @relation(fields: [ride_id], references: [id])}model Chats {  id String @id @unique @db.Uuid @default(uuid(4))  finished Boolean @default(false)  createdAt DateTime @default(now())  updatedAt DateTime @updatedAt  driver_id BigInt  driver Users @relation(name: "ChatsAsDriver", fields: [driver_id], references: [id])  passenger_id BigInt  passenger Users @relation(name: "ChatsAsPassenger", fields: [passenger_id], references: [id])  ride_id String @db.Uuid  ride Ride @relation(fields: [ride_id], references: [id])  messages ChatMessages[]}model ChatMessages {  id String @id @unique @db.Uuid @default(uuid(4))  message String @db.Text  read Boolean @default(false)  createdAt DateTime @default(now())  updatedAt DateTime @updatedAt  sender_id BigInt  sender Users @relation(fields: [sender_id], references: [id])  chat_id String @db.Uuid  chat Chats @relation(fields: [chat_id], references: [id])}model Points {  id String @id @unique @db.Uuid @default(uuid(4))  lat Float @db.DoublePrecision  lon Float @db.DoublePrecision  city String @db.Text  region String @db.Text  district String @db.Text  street String @db.Text  full_address String @db.Text  index Int  createdAt DateTime @default(now())  updatedAt DateTime @updatedAt  ride_id String @db.Uuid  ride Ride @relation(fields: [ride_id], references: [id])  from_indexes RideIndexes[] @relation("IndexFromPoint")  to_indexes RideIndexes[] @relation("IndexToPoint")  from_trips Trips[] @relation("TripFromPoint")  to_trips Trips[] @relation("TripToPoint")}model RideIndexes {  id String @id @unique @db.Uuid @default(uuid(4))  occupied Int @default(0)  index Int  createdAt DateTime @default(now())  updatedAt DateTime @updatedAt  from_point_id String @db.Uuid  from Points @relation(name: "IndexFromPoint", fields: [from_point_id], references: [id])  to_point_id String @db.Uuid  to Points @relation(name: "IndexToPoint", fields: [to_point_id], references: [id])  ride_id String @db.Uuid  ride Ride @relation(fields: [ride_id], references: [id])}model Trips {  id String @id @unique @db.Uuid @default(uuid(4))  index Int  price BigInt  duration BigInt  distance Int  status TripStatus @default(waiting)  createdAt DateTime @default(now())  updatedAt DateTime @updatedAt  from_point_id String @db.Uuid  from Points @relation(name: "TripFromPoint", fields: [from_point_id], references: [id])  to_point_id String @db.Uuid  to Points @relation(name: "TripToPoint", fields: [to_point_id], references: [id])  ride_id String @db.Uuid  ride Ride @relation(fields: [ride_id], references: [id])  bookings Bookings[]  transactions Transactions[]}model Bookings {  id String @id @unique @db.Uuid @default(uuid(4))  canceled Boolean @default(false)  seats Int  payment_method PaymentMethod  createdAt DateTime @default(now())  updatedAt DateTime @updatedAt  card_id String @db.Uuid  card Cards @relation(fields: [card_id], references: [id])  trip_id String @db.Uuid  trip Trips @relation(fields: [trip_id], references: [id])  user_id_made_booking BigInt  user_of_made_booking Users @relation(fields: [user_id_made_booking], references: [id])  users BookingUsers[]  transactions Transactions[]}model BookingUsers {  createdAt DateTime @default(now())  updatedAt DateTime @updatedAt  book_id String @db.Uuid  book Bookings @relation(fields: [book_id], references: [id])  user_id BigInt  user Users @relation(fields: [user_id], references: [id])  @@id([book_id, user_id])}model Transactions {  id String @id @unique @db.Uuid @default(uuid(4))  billing_transaction_id String @unique @db.Text  system_transaction_id String @db.Text  transaction_type TransactionType  payment_system String  status TransactionStatus @default(pending)  method PaymentMethod  createdAt DateTime @default(now())  updatedAt DateTime @updatedAt  card_id String? @db.Uuid  card Cards? @relation(fields: [card_id], references: [id])  wallet_id String? @db.Uuid  wallet Wallet? @relation(fields: [wallet_id], references: [id])  user_id BigInt  user Users @relation(fields: [user_id], references: [id])  ride_id String? @db.Uuid  ride Ride? @relation(fields: [ride_id], references: [id])  trip_id String? @db.Uuid  trip Trips? @relation(fields: [trip_id], references: [id])  booking_id String? @db.Uuid  book Bookings? @relation(fields: [booking_id], references: [id])}